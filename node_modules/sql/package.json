{
  "author": {
    "name": "brianc",
    "email": "brian.m.carlson@gmail.com"
  },
  "name": "sql",
  "description": "sql builder",
  "version": "0.2.4",
  "homepage": "https://github.com/brianc/node-sql",
  "repository": {
    "type": "git",
    "url": "git://github.com/brianc/node-sql.git"
  },
  "main": "lib/",
  "scripts": {
    "test": "node test/"
  },
  "engines": {
    "node": "*"
  },
  "dependencies": {},
  "devDependencies": {
    "test-dir": "*",
    "tap": "*"
  },
  "readme": "# node-sql\r\n_sql string builder for node_\r\n\r\nBuilding SQL statements by hand is no fun, especially in a language which has clumsy support for multi-line strings.\r\n\r\nSo let's build it with JavaScript.\r\n\r\nMaybe it's still not fun, but at least it's _less not fun_.\r\n\r\n[![Build Status](https://secure.travis-ci.org/brianc/node-sql.png)](http://travis-ci.org/brianc/node-sql)\r\n\r\n## examples\r\n\r\n```js\r\n//require the module\r\nvar sql = require('sql');\r\n\r\n//first we define our tables\r\nvar user = sql.define({\r\n  name: 'user',\r\n  columns: ['id', 'email', 'lastLogin']\r\n});\r\n\r\nvar post = sql.define({\r\n  name: 'post',\r\n  columns: ['id', 'userId', 'date', 'title', 'body']\r\n})\r\n\r\n//now let's make a simple query\r\nvar query = user.select(user.star()).from(user).toQuery();\r\nconsole.log(query.text); //SELECT \"user\".* FROM \"user\"\r\n\r\n//something more interesting\r\nvar query = user\r\n    .select(user.id)\r\n    .from(user)\r\n    .where(\r\n      user.name.equals('boom').and(user.id.equals(1))\r\n    ).or(\r\n      user.name.equals('bang').and(user.id.equals(2))\r\n    ).toQuery();\r\n\r\n//query is parameterized by default\r\nconsole.log(query.text); //SELECT \"user\".\"id\" FROM \"user\" WHERE (((\"user\".\"name\" = $1) AND (\"user\".\"id\" = $2)) OR ((\"user\".\"name\" = $3) AND (\"user\".\"id\" = $4)))\r\n\r\nconsole.log(query.values); //['boom', 1, 'bang', 2]\r\n\r\n\r\n//how about a join?\r\nvar query = user.select(user.name, post.content)\r\n  .from(user.join(post).on(user.id.equals(post.userId))).toQuery();\r\n\r\nconsole.log(query.text); //'SELECT \"user\".\"name\", \"post\".\"content\" FROM \"user\" INNER JOIN \"post\" ON (\"user\".\"id\" = \"post\".\"userId\")'\r\n```\r\n\r\nThere are a __lot__ more examples included in the `test` folder.\r\n\r\n## contributing\r\n\r\nI __love__ contributions.  If I could, I would write __love__ 500 times, but that would be readme bloat.\r\n\r\nStill, that's how much I love them.  Let's work _together_ on this.\r\n\r\nIf you want to contribute here's what you do:\r\n\r\n1. fork the repo\r\n2. `git pull https://github.com/(your_username)/node-sql`\r\n3. `cd node-sql`\r\n4. `npm install`\r\n5. `npm test`\r\n\r\nAt this point the tests should pass for you.  If they don't pass please open an issue with the output or you can even send me an email directly.  My email address is on my github profile and also on every commit I contributed in the repo.\r\n\r\nOnce the tests are passing, modify as you see fit.  _Please_ make sure you write tests to cover your modifications.  Once you're ready, commit your changes and submit a pull request.\r\n\r\n__As long as your pull request doesn't have completely off-the-wall changes and it does have tests I will almost always merge it right away and push it to npm__\r\n\r\nIf you think your changes are too off-the-wall, open an issue or a pull-request without code so we can discuss them.\r\n\r\n__Seriously:__\r\n\r\n    your contributions >= my contributions\r\n\r\nI definitely need help with mysql and sqlite syntax.  I'm not very familiar...so that's always a good place to start.\r\n\r\n##license\r\nMIT\r\n",
  "readmeFilename": "README.md",
  "_id": "sql@0.2.4",
  "dist": {
    "shasum": "2106e45d2b35d596d8aeeaf46f5a5d41ae84e7ba"
  },
  "_from": "sql"
}
